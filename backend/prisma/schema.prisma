generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  DONOR
  CREATOR
  ADMIN
}

enum DonationType {
  ONE_TIME
  RECURRING
}

enum PayoutStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(DONOR)
  campaigns Campaign[] @relation("CampaignCreator")
  donations Donation[] @relation("DonationDonor")
  recurringDonations RecurringDonation[] @relation("RecurringDonor")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campaign {
  id            String   @id @default(uuid())
  creatorId     String
  title         String
  description   String
  goalAmount    Float
  currentAmount Float   @default(0)
  duration      Int     // in days
  category      String
  coverImage    String?
  status        String  @default("active") // active, completed, etc.
  donations     Donation[]
  recurringDonations RecurringDonation[]
  payoutRequests PayoutRequest[]
  creator       User    @relation("CampaignCreator", fields: [creatorId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Donation {
  id          String   @id @default(uuid())
  donorId     String
  campaignId  String
  amount      Float
  date        DateTime @default(now())
  type        DonationType
  donor       User     @relation("DonationDonor", fields: [donorId], references: [id])
  campaign    Campaign @relation(fields: [campaignId], references: [id])
}

model RecurringDonation {
  id              String   @id @default(uuid())
  donorId         String
  campaignId      String
  amount          Float
  nextDonationDate DateTime
  interval        String   // e.g., "monthly"
  donor           User     @relation("RecurringDonor", fields: [donorId], references: [id])
  campaign        Campaign @relation(fields: [campaignId], references: [id])
}

model PayoutRequest {
  id            String   @id @default(uuid())
  campaignId    String
  amount        Float
  status        PayoutStatus @default(PENDING)
  requestedAt   DateTime @default(now())
  reviewedAt    DateTime?
  campaign      Campaign @relation(fields: [campaignId], references: [id])
} 